% RiDat CPMG flow velocity data analysis % Sebastian Richard - June 21, 2018a = 1;b = 1;c = 2;d = 3;for CCM = (1500:-100:200)    s = num2str(CCM);    %----INPUT---------------------------------------------------------------------    fname = strcat(s,'cpmg_1_300.tnt');    reference = 'cpmg_1_0_300.tnt';%'0CCM_TAU80_06-20-18_SEBCPMG.00001.RiDat';    UseRef = 1; % Set to 1 to divide data by reference file    FindAllEchos = 0; % Set to 1 to find all echos, otherwise will ONLY look at even echos (usually!).    FirstEcho = 2;    EchoSkip = 2;    LastEcho = 10;     baseline = 25000; % Specify a baseline (i.e. a minimum peak height) for what constitutes a peak    baseline_ref = 200000; % Specify a baseline for what constitutes a peak in reference data    % Instrument parameters (MAKE SURE THESE ARE CORRECT!!)    TAU = 300;    SI = 20;    DW = 0.1;    %-------------------------------------------------------------------------------    % Calculating the correct timing between peak maximums    if FindAllEchos == 1        for n = 1:(LastEcho)        time(n) = (2*n*TAU);        end        MPD = SI-5;    else         for n = 1:(LastEcho)        time(n) = (4*n*TAU);        end        MPD = SI*2-5;        FirstEcho = FirstEcho/2;        EchoSkip = EchoSkip/2;        LastEcho = LastEcho/2;    end    Time = transpose(time(FirstEcho:EchoSkip:LastEcho));    data = bnrreadridat(fname);    % Finding peaks in the data    [pks,loc]= findpeaks(abs(data),'minpeakheight',baseline, 'MINPEAKDISTANCE',MPD);    if UseRef == 1        ref_data = bnrreadridat(reference);        % Finding peaks in reference data         [pks2,loc2] = findpeaks(abs(ref_data),'minpeakheight',baseline_ref, 'MINPEAKDISTANCE',MPD);        for n = 1:LastEcho            intensitydivnoflow(n) = pks(n)/pks2(n);        end        intensity = transpose(intensitydivnoflow(FirstEcho:EchoSkip:LastEcho));        subplot(14,3,d)        plot(abs(data),'b')        hold on         plot(abs(ref_data),'r')        scatter(loc,pks,'g')        scatter(loc2,pks2,'o')        hold off    else         intensity = pks(FirstEcho:EchoSkip:LastEcho);    end    % Plotting peaks     subplot(14,3,b)          scatter(Time,intensity,'r')        %ylim([0,1.5])        hold on        % Plotting line of best fit        [coef_fit, S] = polyfit(Time,intensity,1);        y_fit = polyval(coef_fit,xlim);        plot(xlim,y_fit,'r');        hold off    slope = coef_fit(1);    y_intercept = coef_fit(2);    BA(a,1) = (-slope/y_intercept)*1000000;   % -B/A ratio (sec^-1) (as decribed in paper by Osán et al.)    % fprintf('-B/A   =')    % disp(BA)    % R^2 value for linear fit    ystar = slope*Time+y_intercept;    SquaredErrorLine = sum((intensity-ystar).^2);    SquaredMeanY = sum((intensity-mean(intensity)).^2);    rsq(a,1) = 1-(SquaredErrorLine/SquaredMeanY);    % fprintf('R^2    =')    % disp(rsq)    subplot(14,3,c)    plot(abs(data),'b')    hold on     scatter(loc(FirstEcho:EchoSkip:LastEcho),pks(FirstEcho:EchoSkip:LastEcho),'r')    hold off    %slope    %y_intercept     %Time        intensity1st(a,1) = intensity(1,1);         a=a+1;    b=b+3;    c=c+3;    d=d+3;endBArsq%intensity1st